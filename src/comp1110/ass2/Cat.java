package comp1110.ass2;

// author: Weiqi Huang

import java.util.ArrayList;
import java.util.List;

public class Cat {
    /*
    fields:
color
ID: 1-5
location
boolean isExhausted
methods:
move
     */
    private int catId;
    private Colour colour;
    private boolean isExhausted;

    private Location catLocation;


    public Cat(int catId, Colour colour, boolean isExhausted, Location location){
        this.isExhausted = isExhausted;
        this.catId = catId;
        this.catLocation = location ;
        this.colour = colour;
    }


    /**
     * this method can be called independently. Creats cats using challengeString
     *
     * @author Yu Ma
     * @param challengeString the same challengeString as used in initialization
     * @return a list of Cat initialized
     */
    public static List<Cat> creatCatFromChallenge(String challengeString){

        String catSubstring = challengeString.substring(challengeString.indexOf('C') + 1, challengeString.indexOf('R'));
        List<Cat> catList = new ArrayList<>();

        while (!catSubstring.isEmpty()) {
            int catId = Integer.parseInt(catSubstring.substring(0, 1));
            int cardAtRow = Integer.parseInt(catSubstring.substring(1, 3));
            int cardAtColumn = Integer.parseInt(catSubstring.substring(3, 5));
            Location catLocation = new Location(cardAtRow,cardAtColumn);
            Colour catColour = Colour.fromChar(Utility.CAT_CARDS[catId].charAt(5));

            Cat cat = new Cat(catId,catColour,false,catLocation);
            catList.add(cat);
            catSubstring = catSubstring.substring(5);
        }
        return catList;
    }


    /**
     *This method is to add catTiles to the board according to challenge string.
     *
     *In this part of initializing the game, all added cat tiles are 3*3 shape. And the coordiante
     *refers to the top left location.
     *
     *Return nothing, just update the Square[][] board.
     * @author Yu MA
     * @param board the Square[][] representing the play board. This is generated by putting 4 islands together
     * @param catSubstring Substring from challenge. eg. "11203 30603 40009"
     *      *              First character is number between 0 and 6 representing the ID of the cat card.
     *                     Then,every 2 digit represent a row index or a column index on the play board.
     */
    public static void addCats(Square[][] board, String catSubstring) {

        while (!catSubstring.isEmpty()) {
            int catId = Integer.parseInt(catSubstring.substring(0, 1));
            int cardAtRow = Integer.parseInt(catSubstring.substring(1, 3));
            int cardAtColumn = Integer.parseInt(catSubstring.substring(3, 5));
            //this is a length of 9 string, represents the colours on a cat card
            String catCardString = Utility.CAT_CARDS[catId].substring(1);

            //iterate through a 3*3 cat card
            int index = 0;
            for (int r = cardAtRow; r < cardAtRow + 3; r++) {
                for (int c = cardAtColumn; c < cardAtColumn + 3; c++) {
                    board[r][c].setColour(Colour.fromChar(catCardString.charAt(index)));
                    index++;
                }
            }

            catSubstring = catSubstring.substring(5);
        }
    }

    public Colour getColour() {
        return colour;
    }

    public boolean isExhausted() {
        return isExhausted;
    }

    public void setExhausted(boolean exhausted) {
        isExhausted = exhausted;
    }

    public Location getCatLocation() {
        return catLocation;
    }

    public void setCatLocation(Location catLocation) {
        this.catLocation = catLocation;
    }

    public Location initialLocation(Location l) {
        // set initial location
        this.catLocation = l;
        return this.catLocation;
    }

    public void move(Location newLocation) {
        // move the cat to a new location
        this.catLocation = newLocation;
        this.isExhausted = true;
    }

//    public boolean overLap(BigBoard b) {
//        // check if the cat's location overlaps with fire or another cat on the board
//        return b.isOverlap(this.catLocation);
//    }

    @Override
    public String toString() {
        return String.format("%c%02d%02d", colour.toChar(), catLocation.getRow(), catLocation.getColumn());
    }
}


