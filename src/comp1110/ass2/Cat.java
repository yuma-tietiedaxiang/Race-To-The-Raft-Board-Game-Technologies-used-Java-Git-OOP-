package comp1110.ass2;

// author: Weiqi Huang

public class Cat {
    /*
    fields:
color
ID: 1-5
location
boolean isExhausted
methods:
move
     */
    private int catId;
    private Colour colour;
    private boolean isExhausted;

    private Location catLocation;


    public Cat(int catId, Colour colour, boolean isExhausted, Location location){
        this.isExhausted = isExhausted;
        this.catId = catId;
        this.catLocation = location ;
        this.colour = colour;
    }

//    public Location initialLocation(Location l){
//        return null;
//    }//set initial location
//
//    public void move(Cat cat){}
//
//    public boolean overLap(BigBoard b){
//        return false;
//    }//not on fire or cat
//
//}

    /**
     *This method is to add catTiles to the board according to challenge string.
     *
     *In this part of initializing the game, all added cat tiles are 3*3 shape. And the coordiante
     *refers to the top left location.
     *
     *Return nothing, just update the Square[][] board.
     * @param board the Square[][] representing the play board. This is generated by putting 4 islands together
     * @param catSubstring Substring from challenge. eg. "11203 30603 40009"
     *      *              First character is number between 0 and 6 representing the ID of the cat card.
     *                     Then,every 2 digit represent a row index or a column index on the play board.
     */
    public static void addCats(Square[][] board, String catSubstring) {
//        System.out.println("CatString: "+catSubstring);
        while (!catSubstring.isEmpty()) {
            int catId = Integer.parseInt(catSubstring.substring(0, 1));
            int cardAtRow = Integer.parseInt(catSubstring.substring(1, 3));
            int cardAtColumn = Integer.parseInt(catSubstring.substring(3, 5));
            //this is a length of 9 string
            String catCardString = Utility.CAT_CARDS[catId].substring(1);

//            System.out.println("ID: "+ catId +"左上行列"+ cardAtRow +" "+ cardAtColumn);
//            System.out.println("对应utility: "+catCardString);

            //rotate through a 3*3 cat card
            int index = 0;
            for (int r = cardAtRow; r < cardAtRow + 3; r++) {
                for (int c = cardAtColumn; c < cardAtColumn + 3; c++) {
                    board[r][c].setColour(Colour.fromChar(catCardString.charAt(index)));
                    index++;
                }
            }
            catSubstring = catSubstring.substring(5);
        }
    }

    public Colour getColour() {
        return colour;
    }

    public boolean isExhausted() {
        return isExhausted;
    }

    public void setExhausted(boolean exhausted) {
        isExhausted = exhausted;
    }

    public Location getCatLocation() {
        return catLocation;
    }

    public void setCatLocation(Location catLocation) {
        this.catLocation = catLocation;
    }

    public Location initialLocation(Location l) {
        // set initial location
        this.catLocation = l;
        return this.catLocation;
    }

    public void move(Location newLocation) {
        // move the cat to a new location
        this.catLocation = newLocation;
        this.isExhausted = true;
    }

//    public boolean overLap(BigBoard b) {
//        // check if the cat's location overlaps with fire or another cat on the board
//        return b.isOverlap(this.catLocation);
//    }

    @Override
    public String toString() {
        return String.format("%c%02d%02d", colour.toChar(), catLocation.getRow(), catLocation.getColumn());
    }
}


